name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    # Run daily at 2 AM UTC to refresh data
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm run test:run

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check code formatting
        run: pnpm run format:check

      - name: Run linting
        run: pnpm run lint

      - name: Run full validation
        run: pnpm run validate

  data-refresh:
    name: Data Download & Validation
    runs-on: ubuntu-latest
    needs: [test, code-quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download fresh Pokemon data
        run: |
          echo "ðŸ“¥ Downloading Pokedex data..."
          pnpm run pokedex
          echo "ðŸŽ¯ Scraping wild encounters..."
          pnpm run encounters:scrape

      - name: Run data integrity tests on fresh data
        run: |
          echo "ðŸ§ª Validating data integrity..."
          pnpm vitest run tests/data-integrity.test.ts

      - name: Display data summary
        run: |
          echo "ðŸ“Š Data Summary:"
          echo "Pokemon data files:"
          ls -la data/*.json
          echo ""
          echo "File sizes:"
          du -h data/*.json

      - name: Upload data artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pokemon-data
          path: |
            data/*.json
          retention-days: 30

      - name: Check for data changes
        id: data-changes
        run: |
          if [[ -n $(git status --porcelain data/) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Data files have been updated"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes to data files"
          fi

      - name: Create Pull Request with updated data
        if: steps.data-changes.outputs.changes == 'true' && github.event_name == 'schedule'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update Pokemon data files'
          title: 'ðŸ¤– Auto-update Pokemon data'
          body: |
            This PR contains automatically updated Pokemon data files.

            Updated files:
            - Pokemon base entries
            - Location data
            - Route encounters (Classic & Remix)

            Generated by: ${{ github.workflow }} workflow
            Triggered by: ${{ github.event_name }}
          branch: auto-update-data
          delete-branch: true
