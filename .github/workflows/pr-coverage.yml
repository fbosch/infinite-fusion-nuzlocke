name: PR Coverage Report

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage-comment:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests with coverage
      run: pnpm test:coverage
    
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            // Read coverage summary
            const coveragePath = './coverage/coverage-summary.json';
            if (!fs.existsSync(coveragePath)) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '‚ùå Coverage report not generated. Please check the test run.'
              });
              return;
            }
            
            const coverageData = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
            const total = coverageData.total;
            
            // Calculate overall coverage
            const overallCoverage = Math.round(
              (total.lines.pct + total.functions.pct + total.branches.pct + total.statements.pct) / 4
            );
            
            // Determine badge color
            let badgeColor = 'red';
            if (overallCoverage >= 80) badgeColor = 'brightgreen';
            else if (overallCoverage >= 60) badgeColor = 'yellow';
            else if (overallCoverage >= 40) badgeColor = 'orange';
            
            const badge = `![Coverage](https://img.shields.io/badge/coverage-${overallCoverage}%25-${badgeColor})`;
            
            // Create coverage comment
            const comment = `## üìä Test Coverage Report ${badge}

### Overall Coverage: **${overallCoverage}%**

| Metric | Coverage |
|--------|----------|
| Lines | ${total.lines.pct}% |
| Functions | ${total.functions.pct}% |
| Branches | ${total.branches.pct}% |
| Statements | ${total.statements.pct}% |

### Coverage Details

<details>
<summary>üìÅ File Coverage Breakdown</summary>

\`\`\`
${Object.entries(coverageData)
  .filter(([key]) => key !== 'total')
  .map(([file, data]) => {
    const fileCoverage = Math.round(
      (data.lines.pct + data.functions.pct + data.branches.pct + data.statements.pct) / 4
    );
    return `${file}: ${fileCoverage}%`;
  })
  .join('\n')}
\`\`\`

</details>

---

*This report was generated automatically by GitHub Actions.*
*View detailed coverage at: [Coverage Report](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.error('Error creating coverage comment:', error);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå Error generating coverage report. Please check the workflow logs.'
            });
          }
