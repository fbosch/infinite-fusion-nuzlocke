---
alwaysApply: true
---

# Accessibility Guidelines

Comprehensive accessibility requirements for the Infinite Fusion Nuzlocke tracker to ensure WCAG 2.1 AA compliance.

## Core Accessibility Principles

### Universal Design

- **Inclusive Design**: All features must be usable by people with disabilities
- **Multiple Input Methods**: Support keyboard, mouse, touch, and assistive technologies
- **Clear Communication**: Provide clear, concise information through multiple channels
- **Error Prevention**: Design interfaces that prevent errors and provide clear recovery

### WCAG 2.1 AA Compliance

- **Perceivable**: Information must be presentable to users in ways they can perceive
- **Operable**: User interface components must be operable
- **Understandable**: Information and operation of user interface must be understandable
- **Robust**: Content must be robust enough to be interpreted by assistive technologies

## Semantic HTML Requirements

### Proper HTML Structure

```html
<!-- Good: Semantic HTML with proper roles -->
<table role="table" aria-label="Data table">
  <thead>
    <tr>
      <th role="columnheader" aria-sort="ascending">Column Header</th>
    </tr>
  </thead>
  <tbody>
    <tr role="row">
      <td role="cell">Data</td>
    </tr>
  </tbody>
</table>

<!-- Bad: Non-semantic structure -->
<div class="table">
  <div class="header">Header</div>
  <div class="row">Data</div>
</div>
```

### Interactive Elements

- **Buttons**: Use `<button>` elements for all clickable actions
- **Links**: Use `<a>` elements for navigation
- **Forms**: Use proper form elements with labels
- **Landmarks**: Use semantic landmarks (header, nav, main, aside, footer)

## ARIA Attributes and Roles

### Essential ARIA Attributes

```typescript
// Good: Proper ARIA attributes
<button
  aria-label="Sort table by name"
  aria-expanded={isExpanded}
  aria-pressed={isPressed}
  role="button"
>
  Sort
</button>

// Bad: Missing accessibility attributes
<button onClick={handleSort}>
  Sort
</button>
```

### Common ARIA Patterns

- **aria-label**: Provide descriptive labels for elements
- **aria-describedby**: Link elements to descriptions
- **aria-live**: Announce dynamic content changes
- **aria-hidden**: Hide decorative elements from screen readers
- **aria-expanded**: Indicate expandable/collapsible state
- **aria-pressed**: Indicate toggle button state

## Keyboard Navigation

### Tab Order and Focus Management

```typescript
// Good: Proper keyboard navigation
const handleKeyDown = (e: KeyboardEvent) => {
  if (e.key === 'Enter' || e.key === ' ') {
    e.preventDefault();
    handleAction();
  }
};

<button
  tabIndex={0}
  onKeyDown={handleKeyDown}
  onFocus={handleFocus}
>
  Action
</button>
```

### Focus Indicators

- **Visible Focus**: All focusable elements must have visible focus indicators
- **Focus Ring**: Use consistent focus ring styling
- **Skip Links**: Provide skip links for main content areas
- **Focus Trapping**: Manage focus in modals and dialogs

## Screen Reader Support

### Text Alternatives

```typescript
// Good: Descriptive text for screen readers
<img
  src="pokemon-sprite.png"
  alt="Charizard, a fire-type Pokémon with orange and yellow coloring"
/>

// Bad: Non-descriptive or missing alt text
<img src="pokemon-sprite.png" />
<img src="pokemon-sprite.png" alt="Pokemon" />
```

### Dynamic Content

```typescript
// Good: Announce dynamic content changes
<div aria-live="polite" role="status">
  {statusMessage}
</div>

// Good: Provide loading states
<div aria-live="polite" aria-busy="true">
  Loading locations...
</div>
```

## Color and Visual Design

### Color Contrast Requirements

- **Normal Text**: Minimum 4.5:1 contrast ratio
- **Large Text**: Minimum 3:1 contrast ratio
- **UI Components**: Minimum 3:1 contrast ratio
- **Focus Indicators**: High contrast focus indicators

### Color Independence

```typescript
// Good: Don't rely solely on color
<div className="flex items-center space-x-2">
  <span className="text-red-500">●</span>
  <span>Error: Invalid input</span>
</div>

// Bad: Relying only on color
<div className="text-red-500">Error occurred</div>
```

## Form Accessibility

### Proper Form Structure

```typescript
// Good: Proper form labels and structure
<form>
  <label htmlFor="pokemon-name">Pokemon Name:</label>
  <input
    id="pokemon-name"
    type="text"
    aria-describedby="name-help"
    aria-required="true"
  />
  <div id="name-help">Enter the name of your Pokemon</div>
</form>
```

### Error Handling

```typescript
// Good: Clear error messages with ARIA
<input
  aria-invalid={hasError}
  aria-describedby={hasError ? "error-message" : undefined}
/>
{hasError && (
  <div id="error-message" role="alert" aria-live="polite">
    Please enter a valid Pokemon name
  </div>
)}
```

## Table Accessibility

### Data Tables

```typescript
// Good: Accessible table structure
<table role="table" aria-label="Pokemon locations">
  <thead>
    <tr>
      <th role="columnheader" aria-sort="ascending">
        Location Name
        <span aria-hidden="true">↑</span>
      </th>
    </tr>
  </thead>
  <tbody>
    <tr role="row">
      <td role="cell">Route 1</td>
    </tr>
  </tbody>
</table>
```

### Sortable Tables

- **aria-sort**: Indicate current sort state
- **Keyboard Navigation**: Support arrow keys for navigation
- **Sort Announcements**: Announce sort changes to screen readers

## Component Accessibility Patterns

### Modal Dialogs

```typescript
// Good: Accessible modal implementation
<div
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
  aria-describedby="modal-description"
>
  <h2 id="modal-title">Confirm Action</h2>
  <p id="modal-description">Are you sure you want to proceed?</p>
  <button onClick={handleConfirm}>Confirm</button>
  <button onClick={handleCancel}>Cancel</button>
</div>
```

### Dropdown Menus

```typescript
// Good: Accessible dropdown
<div role="combobox" aria-expanded={isOpen} aria-haspopup="listbox">
  <button
    aria-labelledby="dropdown-label"
    onClick={toggleDropdown}
  >
    <span id="dropdown-label">Select Pokemon</span>
  </button>
  {isOpen && (
    <ul role="listbox" aria-label="Pokemon options">
      {options.map(option => (
        <li
          key={option.id}
          role="option"
          aria-selected={selectedId === option.id}
        >
          {option.name}
        </li>
      ))}
    </ul>
  )}
</div>
```

## Testing Accessibility

### Manual Testing Checklist

- [ ] **Keyboard Navigation**: All features work with keyboard only
- [ ] **Screen Reader**: Test with NVDA, JAWS, or VoiceOver
- [ ] **Color Contrast**: Verify contrast ratios meet requirements
- [ ] **Focus Management**: Check focus indicators and tab order
- [ ] **Error Messages**: Ensure errors are announced to screen readers
- [ ] **Dynamic Content**: Verify live regions announce changes

### Automated Testing

```typescript
// Use accessibility testing libraries
import { axe, toHaveNoViolations } from 'jest-axe';

expect.extend(toHaveNoViolations);

test('component is accessible', async () => {
  const { container } = render(<MyComponent />);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});
```

## Common Accessibility Issues

### Avoid These Patterns

```typescript
// ❌ Bad: Non-semantic click handlers
<div onClick={handleClick}>Click me</div>

// ❌ Bad: Missing labels
<input type="text" />

// ❌ Bad: Color-only indicators
<span className="text-red-500">Error</span>

// ❌ Bad: No keyboard support
<div onClick={handleAction}>Action</div>
```

### Fix These Issues

```typescript
// ✅ Good: Proper button element
<button onClick={handleClick}>Click me</button>

// ✅ Good: Proper label
<label htmlFor="input-id">Label</label>
<input id="input-id" type="text" />

// ✅ Good: Multiple indicators
<div className="flex items-center space-x-2">
  <span className="text-red-500">●</span>
  <span>Error message</span>
</div>

// ✅ Good: Keyboard support
<button
  onClick={handleAction}
  onKeyDown={(e) => e.key === 'Enter' && handleAction()}
>
  Action
</button>
```

## Accessibility Resources

### Tools and Libraries

- **axe-core**: Automated accessibility testing
- **@axe-core/react**: React-specific accessibility testing
- **react-aria**: Accessible React components
- **@radix-ui/react**: Accessible component primitives

### Documentation

- [WCAG 2.1 Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)
- [MDN Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility)
- [Web.dev Accessibility](https://web.dev/accessibility/)

## Implementation Guidelines

### Component Development

1. **Start with Semantic HTML**: Use proper HTML elements
2. **Add ARIA Attributes**: Include necessary accessibility attributes
3. **Test Keyboard Navigation**: Ensure full keyboard accessibility
4. **Verify Screen Reader Support**: Test with assistive technologies
5. **Check Color Contrast**: Ensure sufficient contrast ratios

### Code Review Process

- [ ] Semantic HTML structure
- [ ] Proper ARIA attributes
- [ ] Keyboard navigation support
- [ ] Screen reader compatibility
- [ ] Color contrast compliance
- [ ] Error handling accessibility
- [ ] Dynamic content announcements

### Continuous Improvement

- **Regular Audits**: Conduct accessibility audits
- **User Testing**: Test with users who have disabilities
- **Automated Testing**: Use accessibility testing tools
- **Training**: Educate team on accessibility best practices

# Accessibility Guidelines

Comprehensive accessibility requirements for the Infinite Fusion Nuzlocke tracker to ensure WCAG 2.1 AA compliance.

## Core Accessibility Principles

### Universal Design

- **Inclusive Design**: All features must be usable by people with disabilities
- **Multiple Input Methods**: Support keyboard, mouse, touch, and assistive technologies
- **Clear Communication**: Provide clear, concise information through multiple channels
- **Error Prevention**: Design interfaces that prevent errors and provide clear recovery

### WCAG 2.1 AA Compliance

- **Perceivable**: Information must be presentable to users in ways they can perceive
- **Operable**: User interface components must be operable
- **Understandable**: Information and operation of user interface must be understandable
- **Robust**: Content must be robust enough to be interpreted by assistive technologies

## Semantic HTML Requirements

### Proper HTML Structure

```html
<!-- Good: Semantic HTML with proper roles -->
<table role="table" aria-label="Data table">
  <thead>
    <tr>
      <th role="columnheader" aria-sort="ascending">Column Header</th>
    </tr>
  </thead>
  <tbody>
    <tr role="row">
      <td role="cell">Data</td>
    </tr>
  </tbody>
</table>

<!-- Bad: Non-semantic structure -->
<div class="table">
  <div class="header">Header</div>
  <div class="row">Data</div>
</div>
```

### Interactive Elements

- **Buttons**: Use `<button>` elements for all clickable actions
- **Links**: Use `<a>` elements for navigation
- **Forms**: Use proper form elements with labels
- **Landmarks**: Use semantic landmarks (header, nav, main, aside, footer)

## ARIA Attributes and Roles

### Essential ARIA Attributes

```typescript
// Good: Proper ARIA attributes
<button
  aria-label="Sort table by name"
  aria-expanded={isExpanded}
  aria-pressed={isPressed}
  role="button"
>
  Sort
</button>

// Bad: Missing accessibility attributes
<button onClick={handleSort}>
  Sort
</button>
```

### Common ARIA Patterns

- **aria-label**: Provide descriptive labels for elements
- **aria-describedby**: Link elements to descriptions
- **aria-live**: Announce dynamic content changes
- **aria-hidden**: Hide decorative elements from screen readers
- **aria-expanded**: Indicate expandable/collapsible state
- **aria-pressed**: Indicate toggle button state

## Keyboard Navigation

### Tab Order and Focus Management

```typescript
// Good: Proper keyboard navigation
const handleKeyDown = (e: KeyboardEvent) => {
  if (e.key === 'Enter' || e.key === ' ') {
    e.preventDefault();
    handleAction();
  }
};

<button
  tabIndex={0}
  onKeyDown={handleKeyDown}
  onFocus={handleFocus}
>
  Action
</button>
```

### Focus Indicators

- **Visible Focus**: All focusable elements must have visible focus indicators
- **Focus Ring**: Use consistent focus ring styling
- **Skip Links**: Provide skip links for main content areas
- **Focus Trapping**: Manage focus in modals and dialogs

## Screen Reader Support

### Text Alternatives

```typescript
// Good: Descriptive text for screen readers
<img
  src="pokemon-sprite.png"
  alt="Charizard, a fire-type Pokémon with orange and yellow coloring"
/>

// Bad: Non-descriptive or missing alt text
<img src="pokemon-sprite.png" />
<img src="pokemon-sprite.png" alt="Pokemon" />
```

### Dynamic Content

```typescript
// Good: Announce dynamic content changes
<div aria-live="polite" role="status">
  {statusMessage}
</div>

// Good: Provide loading states
<div aria-live="polite" aria-busy="true">
  Loading locations...
</div>
```

## Color and Visual Design

### Color Contrast Requirements

- **Normal Text**: Minimum 4.5:1 contrast ratio
- **Large Text**: Minimum 3:1 contrast ratio
- **UI Components**: Minimum 3:1 contrast ratio
- **Focus Indicators**: High contrast focus indicators

### Color Independence

```typescript
// Good: Don't rely solely on color
<div className="flex items-center space-x-2">
  <span className="text-red-500">●</span>
  <span>Error: Invalid input</span>
</div>

// Bad: Relying only on color
<div className="text-red-500">Error occurred</div>
```

## Form Accessibility

### Proper Form Structure

```typescript
// Good: Proper form labels and structure
<form>
  <label htmlFor="pokemon-name">Pokemon Name:</label>
  <input
    id="pokemon-name"
    type="text"
    aria-describedby="name-help"
    aria-required="true"
  />
  <div id="name-help">Enter the name of your Pokemon</div>
</form>
```

### Error Handling

```typescript
// Good: Clear error messages with ARIA
<input
  aria-invalid={hasError}
  aria-describedby={hasError ? "error-message" : undefined}
/>
{hasError && (
  <div id="error-message" role="alert" aria-live="polite">
    Please enter a valid Pokemon name
  </div>
)}
```

## Table Accessibility

### Data Tables

```typescript
// Good: Accessible table structure
<table role="table" aria-label="Pokemon locations">
  <thead>
    <tr>
      <th role="columnheader" aria-sort="ascending">
        Location Name
        <span aria-hidden="true">↑</span>
      </th>
    </tr>
  </thead>
  <tbody>
    <tr role="row">
      <td role="cell">Route 1</td>
    </tr>
  </tbody>
</table>
```

### Sortable Tables

- **aria-sort**: Indicate current sort state
- **Keyboard Navigation**: Support arrow keys for navigation
- **Sort Announcements**: Announce sort changes to screen readers

## Component Accessibility Patterns

### Modal Dialogs

```typescript
// Good: Accessible modal implementation
<div
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
  aria-describedby="modal-description"
>
  <h2 id="modal-title">Confirm Action</h2>
  <p id="modal-description">Are you sure you want to proceed?</p>
  <button onClick={handleConfirm}>Confirm</button>
  <button onClick={handleCancel}>Cancel</button>
</div>
```

### Dropdown Menus

```typescript
// Good: Accessible dropdown
<div role="combobox" aria-expanded={isOpen} aria-haspopup="listbox">
  <button
    aria-labelledby="dropdown-label"
    onClick={toggleDropdown}
  >
    <span id="dropdown-label">Select Pokemon</span>
  </button>
  {isOpen && (
    <ul role="listbox" aria-label="Pokemon options">
      {options.map(option => (
        <li
          key={option.id}
          role="option"
          aria-selected={selectedId === option.id}
        >
          {option.name}
        </li>
      ))}
    </ul>
  )}
</div>
```

## Testing Accessibility

### Manual Testing Checklist

- [ ] **Keyboard Navigation**: All features work with keyboard only
- [ ] **Screen Reader**: Test with NVDA, JAWS, or VoiceOver
- [ ] **Color Contrast**: Verify contrast ratios meet requirements
- [ ] **Focus Management**: Check focus indicators and tab order
- [ ] **Error Messages**: Ensure errors are announced to screen readers
- [ ] **Dynamic Content**: Verify live regions announce changes

### Automated Testing

```typescript
// Use accessibility testing libraries
import { axe, toHaveNoViolations } from 'jest-axe';

expect.extend(toHaveNoViolations);

test('component is accessible', async () => {
  const { container } = render(<MyComponent />);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});
```

## Common Accessibility Issues

### Avoid These Patterns

```typescript
// ❌ Bad: Non-semantic click handlers
<div onClick={handleClick}>Click me</div>

// ❌ Bad: Missing labels
<input type="text" />

// ❌ Bad: Color-only indicators
<span className="text-red-500">Error</span>

// ❌ Bad: No keyboard support
<div onClick={handleAction}>Action</div>
```

### Fix These Issues

```typescript
// ✅ Good: Proper button element
<button onClick={handleClick}>Click me</button>

// ✅ Good: Proper label
<label htmlFor="input-id">Label</label>
<input id="input-id" type="text" />

// ✅ Good: Multiple indicators
<div className="flex items-center space-x-2">
  <span className="text-red-500">●</span>
  <span>Error message</span>
</div>

// ✅ Good: Keyboard support
<button
  onClick={handleAction}
  onKeyDown={(e) => e.key === 'Enter' && handleAction()}
>
  Action
</button>
```

## Accessibility Resources

### Tools and Libraries

- **axe-core**: Automated accessibility testing
- **@axe-core/react**: React-specific accessibility testing
- **react-aria**: Accessible React components
- **@radix-ui/react**: Accessible component primitives

### Documentation

- [WCAG 2.1 Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)
- [MDN Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility)
- [Web.dev Accessibility](https://web.dev/accessibility/)

## Implementation Guidelines

### Component Development

1. **Start with Semantic HTML**: Use proper HTML elements
2. **Add ARIA Attributes**: Include necessary accessibility attributes
3. **Test Keyboard Navigation**: Ensure full keyboard accessibility
4. **Verify Screen Reader Support**: Test with assistive technologies
5. **Check Color Contrast**: Ensure sufficient contrast ratios

### Code Review Process

- [ ] Semantic HTML structure
- [ ] Proper ARIA attributes
- [ ] Keyboard navigation support
- [ ] Screen reader compatibility
- [ ] Color contrast compliance
- [ ] Error handling accessibility
- [ ] Dynamic content announcements

### Continuous Improvement

- **Regular Audits**: Conduct accessibility audits
- **User Testing**: Test with users who have disabilities
- **Automated Testing**: Use accessibility testing tools
- **Training**: Educate team on accessibility best practices
