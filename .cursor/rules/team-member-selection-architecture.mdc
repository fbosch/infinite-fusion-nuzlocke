---
description: Team member selection architecture - UI slots vs encounter table fields
globs: src/components/team/*.tsx,src/stores/playthroughs/*.ts
alwaysApply: false
---

# Team Member Selection: UI vs Data

## ⚠️ CRITICAL: UI Slots ≠ Encounter Fields

**UI "head"/"body" slots are for selection organization only. They do NOT correspond to encounter table fields.**

## ❌ WRONG - Don't Do This

```typescript
// Assuming UI slot = encounter field
await playthroughActions.updatePokemonInEncounter(
  locationId,
  pokemonUID,
  'head',
  updates // ❌ WRONG assumption
);
```

## ✅ CORRECT - Do This Instead

```typescript
// Find Pokémon wherever it actually is
await playthroughActions.updatePokemonByUID(pokemonUID, updates);
```

## Why This Matters

- **UI slots** = User experience organization
- **Encounter fields** = Actual data storage locations
- **Game logic** determines encounter structure, not UI design
- **Pokémon can be stored anywhere** regardless of UI selection

## Quick Reference

| When You Need To                                 | Use This Function            |
| ------------------------------------------------ | ---------------------------- |
| Update specific Pokémon (nickname, status, etc.) | `updatePokemonByUID()`       |
| Update specific encounter field                  | `updatePokemonInEncounter()` |
| Change encounter structure                       | `updateEncounter()`          |

## Common Mistake

**Problem**: UI shows Pokémon in "head" slot, but encounter stores it in "body" field
**Wrong Solution**: Assume it's in head field
**Right Solution**: Use `updatePokemonByUID()` to find it wherever it is

## Related Files

- [TeamMemberSelectionContext.tsx](mdc:src/components/team/TeamMemberSelectionContext.tsx)
- [encounters.ts](mdc:src/stores/playthroughs/encounters.ts)
