---
description: TypeScript and React/Next.js development guidelines including type safety, naming conventions, and performance considerations
globs: []
alwaysApply: true
---

# TypeScript and React Guidelines

## TypeScript Guidelines

- Use strict TypeScript configuration (already configured)
- Prefer explicit types over `any`
- Use interface for object shapes, type for unions/primitives
- Leverage TypeScript path mapping: `@/*` maps to `./src/*`
- Use proper type imports: `import type { ComponentProps } from 'react'`

## React/Next.js Patterns

- Follow ESLint rules (Next.js + TypeScript config)
- Use consistent naming conventions:
  - camelCase for variables and functions
  - PascalCase for components and types
  - kebab-case for file names
- Write self-documenting code with clear variable names
- Add JSDoc comments only for complex functions that cannot be made self-documenting

## Performance Considerations

- Use Next.js optimizations (Turbopack in development)
- Implement proper code splitting
- Optimize images and assets
- Use React.memo for expensive components when needed
- Follow Next.js App Router conventions
- Use Server Components by default, Client Components when needed
- Implement proper error boundaries and loading states
- Use Next.js built-in optimizations (fonts, images, etc.)

## Code Quality

- Follow the principle of least surprise
- Prefer simplicity over cleverness
- Write code for humans, not just machines
- Use meaningful variable and function names
- Keep functions focused and single-purpose

## Code Q
