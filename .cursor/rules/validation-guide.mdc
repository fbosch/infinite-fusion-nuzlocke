# Validation Guide

**Framework**: Zod v4 + Business Logic Validation

## Zod v4 Usage

### Schema Definition
```typescript
// ✅ Good: Use Zod v4 with error customization
export const PokemonSchema = z.object({
  name: z.string().min(1, { error: 'Name is required' }),
  level: z.number().int().positive({ error: 'Level must be positive' }),
  type: z.enum(['Fire', 'Water', 'Grass'], { error: 'Invalid type' }),
});

// Type inference
type Pokemon = z.infer<typeof PokemonSchema>;
```

### Validation Functions
```typescript
// ✅ Good: Safe parsing for non-throwing validation
const result = PokemonSchema.safeParse(data);
if (!result.success) {
  console.error('Validation failed:', result.error);
  return null;
}
return result.data;
```

### Schema Patterns
```typescript
// Base schema
const BaseSchema = z.object({ id: z.string(), name: z.string() });

// Extended schema
const ExtendedSchema = BaseSchema.extend({
  level: z.number().positive(),
  type: z.enum(['Fire', 'Water']),
});

// Partial for forms
const FormSchema = ExtendedSchema.partial({ level: true });
```

## Business Logic Validation

### Nuzlocke Rules
- **One Catch Per Area**: Validate only one Pokémon per route
- **Valid Areas**: Check area progression and availability
- **Nickname Requirement**: All caught Pokémon must have nicknames
- **Team Size**: Maximum 6 active Pokémon

### Fusion Validation
- **Valid Combinations**: Ensure fusion combinations are possible
- **DNA Splicer Usage**: Track and validate availability
- **Triple Fusion**: Validate Kyurem triple fusion requirements

### Progression Validation
- **Route Order**: Logical progression through routes
- **Gym Badge Requirements**: Check badge requirements for areas
- **Story Progression**: Validate story-based unlocks

## Error Handling

### Validation Errors
```typescript
// ✅ Good: Clear error messages with context
try {
  const pokemon = PokemonSchema.parse(data);
} catch (error) {
  if (error instanceof z.ZodError) {
    const issues = error.issues.map(issue => 
      `${issue.path.join('.')}: ${issue.message}`
    );
    console.error('Validation failed:', issues);
  }
}
```

### Graceful Degradation
- Handle missing or corrupted data
- Provide clear error messages
- Offer recovery options
- Validate before critical actions

## Performance Optimization

### Zod v4 Benefits
- **14x faster** string parsing
- **7x faster** array parsing
- **100x reduction** in TypeScript instantiations
- Smaller bundle size with Zod Mini option

### Best Practices
- Use `.safeParse()` for non-throwing validation
- Centralize schemas in `src/types/`
- Create reusable base schemas
- Use partial schemas for forms

## Testing Requirements

### Schema Testing
- Test valid data acceptance
- Test invalid data rejection
- Test edge cases and boundaries
- Verify error message clarity

### Integration Testing
- Test data loading validation
- Test form validation
- Test error recovery
- Test business logic validation

## Quick Rules

- **Always use Zod v4** for data validation
- **Use `.safeParse()`** for non-throwing validation
- **Provide clear error messages** with context
- **Centralize schemas** in types directory
- **Test validation functions** thoroughly
- **Handle errors gracefully** with user feedback
- **Validate before critical actions** (save, load, import)
---
alwaysApply: true
description: Comprehensive validation guidelines including Zod v4 usage, business logic validation, and error handling
---
