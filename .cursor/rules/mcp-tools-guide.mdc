---
alwaysApply: true
---

# MCP Tools Quick Reference

**Priority Order**: Vitest MCP → GitMCP → Context7 → Browser Tools → Sequential Thinking

## 1. Vitest MCP - Primary Testing Tool

**Use for**: All testing operations (files, directories, coverage, debugging)
**Tools**: `mcp_vitest_set_project_root()`, `mcp_vitest_run_tests()`, `mcp_vitest_analyze_coverage()`
**Fallback**: `pnpm test:run` when MCP fails

## 2. GitMCP - Project Documentation

**Use for**: Repository docs, code search, external links
**Tools**: `mcp_gitmcp_fetch_infinite_docs()`, `mcp_gitmcp_search_infinite_docs()`, `mcp_gitmcp_search_infinite_code()`

## 3. Context7 - Library Documentation

**Use for**: External library research, API docs, code examples
**Tools**: `mcp_context7_resolve-library-id()`, `mcp_context7_get-library-docs()`

## 4. Browser Tools - Web Testing

**Use for**: Browser automation, debugging, audits (accessibility, performance, SEO)
**Tools**: `mcp_browser-tools_takeScreenshot()`, `mcp_browser-tools_runAccessibilityAudit()`, `mcp_browser-tools_runPerformanceAudit()`, `mcp_browser-tools_runSEOAudit()`, `mcp_browser-tools_runNextJSAudit()`, `mcp_browser-tools_runBestPracticesAudit()`, `mcp_browser-tools_runDebuggerMode()`, `mcp_browser-tools_runAuditMode()`

## 5. Sequential Thinking - Problem Solving & Analysis

**Use for**: Complex problem breakdown, step-by-step analysis, debugging, planning, design decisions
**When to use**: Any complex task requiring systematic thinking, debugging, or multi-step problem solving
**Tool**: `mcp_sequential-thinking_sequentialthinking()`

**Key Features**:

- **Dynamic thinking**: Adjust total thoughts as understanding evolves
- **Revision capability**: Question and revise previous thoughts
- **Branching**: Explore alternative approaches without losing context
- **Hypothesis generation**: Build and verify solution hypotheses
- **Context maintenance**: Keep track of complex problem-solving processes

**Best Use Cases**:

- Debugging complex issues
- Designing system architecture
- Planning multi-step implementations
- Analyzing performance bottlenecks
- Making design decisions with trade-offs
- Breaking down complex requirements

## Quick Decision Matrix

| Task                 | Primary Tool        | Fallback        |
| -------------------- | ------------------- | --------------- |
| **Testing**          | Vitest MCP          | `pnpm test:run` |
| **Project Docs**     | GitMCP              | Manual search   |
| **Library Docs**     | Context7            | Web search      |
| **Web Testing**      | Browser Tools       | Manual testing  |
| **Complex Problems** | Sequential Thinking | Manual analysis |

## Key Workflows

1. **Testing**: `mcp_vitest_set_project_root()` → `mcp_vitest_run_tests()`
2. **Documentation**: `mcp_gitmcp_fetch_infinite_docs()` → `mcp_gitmcp_search_infinite_docs()`
3. **Libraries**: `mcp_context7_resolve-library-id()` → `mcp_context7_get-library-docs()`
4. **Problem Solving**: `mcp_sequential-thinking_sequentialthinking()` → Iterative analysis → Solution

## Best Practices

- **Always set project root first** for Vitest MCP
- **Fetch docs before searching** for better context
- **Use `showLogs: true`** when debugging test failures
- **Have terminal fallbacks ready** for MCP failures
- **Use sequential thinking early** for complex problems to avoid going down wrong paths
- **Start with conservative thought estimates** and adjust as needed

## Configuration

MCP tools configured in [`.cursor/mcp.json`](mdc:.cursor/mcp.json)

## Troubleshooting

| Issue                         | Solution                                                |
| ----------------------------- | ------------------------------------------------------- |
| **Vitest MCP fails**          | Check `@djankies/vitest-mcp` installation               |
| **GitMCP errors**             | Verify repository access in config                      |
| **Context7 issues**           | Ensure correct library names                            |
| **Browser tools fail**        | Check browser automation setup                          |
| **Sequential thinking loops** | Set `nextThoughtNeeded: false` when solution is reached |

**Fallback**: Always have terminal commands ready (`pnpm test:run`, manual search)

# MCP Tools Quick Reference

**Priority Order**: Vitest MCP → GitMCP → Context7 → Browser Tools → Sequential Thinking

## 1. Vitest MCP - Primary Testing Tool

**Use for**: All testing operations (files, directories, coverage, debugging)
**Tools**: `mcp_vitest_set_project_root()`, `mcp_vitest_run_tests()`, `mcp_vitest_analyze_coverage()`
**Fallback**: `pnpm test:run` when MCP fails

## 2. GitMCP - Project Documentation

**Use for**: Repository docs, code search, external links
**Tools**: `mcp_gitmcp_fetch_infinite_docs()`, `mcp_gitmcp_search_infinite_docs()`, `mcp_gitmcp_search_infinite_code()`

## 3. Context7 - Library Documentation

**Use for**: External library research, API docs, code examples
**Tools**: `mcp_context7_resolve-library-id()`, `mcp_context7_get-library-docs()`

## 4. Browser Tools - Web Testing

**Use for**: Browser automation, debugging, audits (accessibility, performance, SEO)
**Tools**: `mcp_browser-tools_takeScreenshot()`, `mcp_browser-tools_runAccessibilityAudit()`, `mcp_browser-tools_runPerformanceAudit()`, `mcp_browser-tools_runSEOAudit()`, `mcp_browser-tools_runNextJSAudit()`, `mcp_browser-tools_runBestPracticesAudit()`, `mcp_browser-tools_runDebuggerMode()`, `mcp_browser-tools_runAuditMode()`

## 5. Sequential Thinking - Problem Solving & Analysis

**Use for**: Complex problem breakdown, step-by-step analysis, debugging, planning, design decisions
**When to use**: Any complex task requiring systematic thinking, debugging, or multi-step problem solving
**Tool**: `mcp_sequential-thinking_sequentialthinking()`

**Key Features**:

- **Dynamic thinking**: Adjust total thoughts as understanding evolves
- **Revision capability**: Question and revise previous thoughts
- **Branching**: Explore alternative approaches without losing context
- **Hypothesis generation**: Build and verify solution hypotheses
- **Context maintenance**: Keep track of complex problem-solving processes

**Best Use Cases**:

- Debugging complex issues
- Designing system architecture
- Planning multi-step implementations
- Analyzing performance bottlenecks
- Making design decisions with trade-offs
- Breaking down complex requirements

## Quick Decision Matrix

| Task                 | Primary Tool        | Fallback        |
| -------------------- | ------------------- | --------------- |
| **Testing**          | Vitest MCP          | `pnpm test:run` |
| **Project Docs**     | GitMCP              | Manual search   |
| **Library Docs**     | Context7            | Web search      |
| **Web Testing**      | Browser Tools       | Manual testing  |
| **Complex Problems** | Sequential Thinking | Manual analysis |

## Key Workflows

1. **Testing**: `mcp_vitest_set_project_root()` → `mcp_vitest_run_tests()`
2. **Documentation**: `mcp_gitmcp_fetch_infinite_docs()` → `mcp_gitmcp_search_infinite_docs()`
3. **Libraries**: `mcp_context7_resolve-library-id()` → `mcp_context7_get-library-docs()`
4. **Problem Solving**: `mcp_sequential-thinking_sequentialthinking()` → Iterative analysis → Solution

## Best Practices

- **Always set project root first** for Vitest MCP
- **Fetch docs before searching** for better context
- **Use `showLogs: true`** when debugging test failures
- **Have terminal fallbacks ready** for MCP failures
- **Use sequential thinking early** for complex problems to avoid going down wrong paths
- **Start with conservative thought estimates** and adjust as needed

## Configuration

MCP tools configured in [`.cursor/mcp.json`](mdc:.cursor/mcp.json)

## Troubleshooting

| Issue                         | Solution                                                |
| ----------------------------- | ------------------------------------------------------- |
| **Vitest MCP fails**          | Check `@djankies/vitest-mcp` installation               |
| **GitMCP errors**             | Verify repository access in config                      |
| **Context7 issues**           | Ensure correct library names                            |
| **Browser tools fail**        | Check browser automation setup                          |
| **Sequential thinking loops** | Set `nextThoughtNeeded: false` when solution is reached |

**Fallback**: Always have terminal commands ready (`pnpm test:run`, manual search)
