description: Code style guidelines emphasizing clean, readable code and minimal comments
globs: ["src/**/*.ts", "src/**/*.tsx", "src/**/*.js", "src/**/*.jsx"]
alwaysApply: true

---

## Code Style Guidelines

### General Principles
- Write clean, readable, and maintainable code
- Follow the principle of least surprise
- Prefer simplicity over cleverness
- Write code for humans, not just machines
- Use meaningful variable and function names that describe their purpose

### Naming Conventions
- Use descriptive names that explain what the code does
- Follow established conventions for the language/framework
- Avoid abbreviations unless they're widely understood
- Use consistent casing patterns throughout the codebase
- Choose names that make the code self-documenting

### Code Structure
- Keep functions and methods focused on a single responsibility
- Limit function length to what can be understood at a glance
- Use early returns to reduce nesting
- Group related code together
- Separate concerns appropriately

### Comments and Documentation
- **Comments should only be included when complexity necessitates them**
- Prefer self-documenting code over comments
- When comments are needed, explain the "why" not the "what"
- Keep comments up to date with code changes
- Use comments for business logic, edge cases, and non-obvious decisions
- Avoid redundant comments that just repeat what the code says

### Code Organization
- Group imports logically (standard library, third-party, local)
- Use consistent indentation and spacing
- Maintain consistent file structure within similar components
- Keep related files close together in the directory structure

### Best Practices
- Write code that's easy to test
- Avoid magic numbers and strings - use named constants
- Handle edge cases explicitly
- Use appropriate data structures for the task
- Consider performance implications of your choices
- Write defensive code that handles unexpected inputs gracefully

### Code Review Guidelines
- Review for readability and maintainability
- Check that the code follows established patterns
- Ensure error handling is appropriate
- Verify that the code solves the intended problem
- Look for opportunities to simplify or improve

### Refactoring Principles
- Refactor when code becomes hard to understand
- Extract reusable patterns into functions/components
- Remove dead code and unused imports
- Simplify complex conditions and expressions
- Break down large functions into smaller, focused ones

### Common Sense Rules
- If you have to explain it in a comment, consider if it can be written more clearly
- If you're copying and pasting code, consider if it should be a function
- If a function does multiple things, consider splitting it
- If a variable name needs a comment to explain it, choose a better name
- If you're not sure if something is clear, err on the side of being more explicit
