---
description: Cursor rules formatting guidelines including metadata structure, frontmatter placement, and common mistakes to avoid
globs: []
alwaysApply: true
---

````

### Correct Placement
```markdown
---
description: Example rule description
globs: []
alwaysApply: true
---

# Rule Title
Rule content goes here...
````

### Incorrect Placement

```markdown
# Rule Title

Rule content goes here...

description:
globs:
alwaysApply: false

---
```

## Metadata Guidelines

### Description Field

- **Required**: Every rule must have a description
- **Concise**: Keep descriptions brief but informative
- **Clear Purpose**: Explain what the rule covers
- **Actionable**: Describe what the rule enforces

### Globs Field

- **Empty Array**: Use `[]` for rules that always apply
- **File Patterns**: Use patterns like `["*.tsx", "*.ts"]` for specific files
- **Specific Scope**: Only use globs when rule applies to specific file types

### AlwaysApply Field

- **True**: For general coding standards and best practices
- **False**: For specific file types or contexts
- **Consistent**: Use the same value across similar rules

## Examples

### General Coding Standards

```yaml
---
description: General code style and formatting guidelines
globs: []
alwaysApply: true
---
```

### TypeScript Specific

```yaml
---
description: TypeScript-specific rules and best practices
globs: ['*.ts', '*.tsx']
alwaysApply: false
---
```

### Component Rules

```yaml
---
description: React component development guidelines
globs: ['src/components/*.tsx']
alwaysApply: false
---
```

## Common Mistakes to Avoid

### 1. Metadata at Bottom

❌ **Wrong**: Placing frontmatter at the end of the file

```markdown
# Rule Content

Content here...

description: Description
globs: []
alwaysApply: false

---
```

✅ **Correct**: Frontmatter at the top

```markdown
---
description: Description
globs: []
alwaysApply: false
---

# Rule Content

Content here...
```

### 2. Missing Required Fields

❌ **Wrong**: Missing description

```yaml
---
globs: []
alwaysApply: true
---
```

✅ **Correct**: All required fields present

```yaml
---
description: Clear description of the rule
globs: []
alwaysApply: true
---
```

### 3. Inconsistent Formatting

❌ **Wrong**: Inconsistent spacing or structure

```yaml
---
description:Description without space
globs:[]
alwaysApply:true
---
```

✅ **Correct**: Proper spacing and structure

```yaml
---
description: Description with proper spacing
globs: []
alwaysApply: true
---
```

## Validation Checklist

### Rule File Review

- [ ] Frontmatter is at the top of the file
- [ ] All required fields are present (description, globs, alwaysApply)
- [ ] Description is clear and concise
- [ ] Globs array is appropriate for the rule scope
- [ ] AlwaysApply value is consistent with rule purpose
- [ ] No metadata appears at the bottom of the file
- [ ] Proper YAML formatting with consistent spacing
- [ ] Rule content follows the frontmatter

### File Organization

- [ ] Rule files are in `.cursor/rules/` directory
- [ ] File names are descriptive and use kebab-case
- [ ] File extensions are `.mdc` for markdown rules
- [ ] Related rules are grouped logically

## Enforcement

### Code Review Process

1. **Check Frontmatter**: Verify metadata is at the top
2. **Validate Fields**: Ensure all required fields are present
3. **Review Content**: Check that rule content is clear and actionable
4. **Test Application**: Verify rule applies correctly to intended files

### Maintenance

- **Regular Reviews**: Periodically review all rule files for consistency
- **Update Descriptions**: Keep descriptions current with rule changes
- **Refactor Scope**: Adjust globs and alwaysApply as needed
- **Remove Duplicates**: Consolidate overlapping rules

## Best Practices

### Rule Creation

1. **Start with Frontmatter**: Always begin with proper metadata
2. **Clear Description**: Write a concise but informative description
3. **Appropriate Scope**: Choose globs and alwaysApply carefully
4. **Test Application**: Verify the rule applies to intended files

### Rule Maintenance

1. **Regular Audits**: Review all rules periodically
2. **Update Descriptions**: Keep descriptions current
3. **Consolidate Rules**: Merge similar or overlapping rules
4. **Remove Obsolete**: Delete rules that are no longer relevant

### Documentation

1. **Clear Examples**: Include good and bad examples
2. **Actionable Content**: Make rules specific and actionable
3. **Consistent Format**: Use consistent formatting across all rules
4. **Regular Updates**: Keep rules current with project changes

## Official Documentation Reference

### Cursor Rules Documentation

For comprehensive information about Cursor rules, refer to the [official Cursor documentation](https://docs.cursor.com/context/rules).

### Key Documentation Sections

- **Rule Types**: Understand Always, Auto Attached, Agent Requested, and Manual rules
- **Rule Anatomy**: Learn about metadata fields (description, globs, alwaysApply)
- **Nested Rules**: Organize rules in subdirectories for better scoping
- **Best Practices**: Follow guidelines for creating effective rules
- **Examples**: See real-world examples of different rule types

### When to Consult Official Docs

- **Creating New Rules**: Reference the documentation for proper structure
- **Rule Types**: Understand when to use each rule type
- **Scoping Rules**: Learn about glob patterns and file matching
- **Advanced Features**: Explore nested rules and rule composition
- **Troubleshooting**: Find solutions for common rule issues

### Integration with Project Rules

This project follows the official Cursor rules structure:

- **Location**: `.cursor/rules/` directory
- **Format**: `.mdc` files with proper frontmatter
- **Version Control**: All rules are committed to git
- **Scoping**: Use appropriate glob patterns and alwaysApply settings
